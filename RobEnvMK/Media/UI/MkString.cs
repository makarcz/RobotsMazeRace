//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RobEnvMK
{
	using System;
	
	
	/// <summary>
	/// Simplified and optimized for speed string class.
	/// </summary>
	/// <remarks>
	/// 	created by - Marek Karcz
	/// 	created on - 10/30/2005 10:48:36 PM
	/// </remarks>
	public class MkString : object
	{
		const int MKSTRING_SIZE = 20000;
		char [] m_caCharArray = new char [MKSTRING_SIZE];
		int m_nLastIndex = 0;
		public string Buffer
		{
			get	{
				
				if (0 == m_nLastIndex)
					return null;
				else
				{
					var caArray = new char [m_nLastIndex];
					for (int i = 0; i < m_nLastIndex; i++)
						caArray [i] = m_caCharArray [i];
					string s = new string (caArray);
					return s;
				}
			}
		}
		
		public int Length
		{
			get	{
				return m_nLastIndex;
			}
		}
		/// <summary>
		/// Default constructor - initializes all fields to default values
		/// </summary>
		public MkString()
		{
			m_caCharArray [m_nLastIndex] = (char) 0;
		}
		
		public void Append (string s)
		{
			char [] caArray = s.ToCharArray ();
			
			for (int j = 0; s.Length > j; m_nLastIndex++, j++)
			{
				m_caCharArray [m_nLastIndex] = caArray [j];
			}
			m_caCharArray [m_nLastIndex] = (char) 0;
		}
		
		public void AddSpace ()
		{
			m_caCharArray [m_nLastIndex++] = ' ';
			m_caCharArray [m_nLastIndex] = (char) 0;
		}
		
		public void Set (string s)
		{
			char [] caArray = s.ToCharArray ();

			for (m_nLastIndex = 0; s.Length > m_nLastIndex && MKSTRING_SIZE > m_nLastIndex; m_nLastIndex++)
			{
				m_caCharArray [m_nLastIndex] = caArray [m_nLastIndex];
			}
			m_caCharArray [m_nLastIndex] = (char) 0;
		}
		
		public void Set (MkString s)
		{
			for (m_nLastIndex = 0; s.Length > m_nLastIndex && MKSTRING_SIZE > m_nLastIndex; m_nLastIndex++)
			{
				m_caCharArray [m_nLastIndex] = s.Buffer [m_nLastIndex];
			}
			m_caCharArray [m_nLastIndex] = (char) 0;
		}
		
		public bool StartsWith (string s)
		{
			char [] caArray = s.ToCharArray ();
			bool bRet = true;
			
			for (int i = 0; s.Length > i && MKSTRING_SIZE > i; i++)
			{
				if (m_caCharArray [i] != caArray [i])
				{
					bRet = false;
					break;
				}
			}
			
			return (bRet);
		}
	}
}
